From 13cf269f9b739bb33a116e1dc984bab14bfb5989 Mon Sep 17 00:00:00 2001
From: Johnny Mnemonic <jm@machine-hall.org>
Date: Sat, 28 Dec 2024 00:21:46 +0100
Subject: [PATCH 20/33] Partially revert "elf: Remove the GET_ADDR_ARGS and
 related macros [...]"

This partially reverts commit 5e249192cac7354af02a7347a0d8c984e0c88ed3.

30e32da6aafcef5a5d5a1c91e233636db6493fc8 also needs adaptations due to
the prior changes.

Fixes #7 for now.
---
 elf/dl-tls.c | 59 +++++++++++++++++++++++++++++++++-------------------
 1 file changed, 38 insertions(+), 21 deletions(-)

diff --git a/elf/dl-tls.c b/elf/dl-tls.c
index a083a82933..d0c5840f3e 100644
--- a/elf/dl-tls.c
+++ b/elf/dl-tls.c
@@ -740,6 +740,23 @@ rtld_hidden_def (_dl_deallocate_tls)
 
 
 #ifdef SHARED
+/* The __tls_get_addr function has two basic forms which differ in the
+   arguments.  The IA-64 form takes two parameters, the module ID and
+   offset.  The form used, among others, on IA-32 takes a reference to
+   a special structure which contain the same information.  The second
+   form seems to be more often used (in the moment) so we default to
+   it.  Users of the IA-64 form have to provide adequate definitions
+   of the following macros.  */
+# ifndef GET_ADDR_ARGS
+#  define GET_ADDR_ARGS tls_index *ti
+#  define GET_ADDR_PARAM ti
+# endif
+# ifndef GET_ADDR_MODULE
+#  define GET_ADDR_MODULE ti->ti_module
+# endif
+# ifndef GET_ADDR_OFFSET
+#  define GET_ADDR_OFFSET ti->ti_offset
+# endif
 
 /* Allocate one DTV entry.  */
 static struct dtv_pointer
@@ -938,25 +955,25 @@ _dl_update_slotinfo (unsigned long int req_modid, size_t new_gen)
 /* Adjust the TLS variable pointer using the TLS descriptor offset and
    the ABI-specific offset.  */
 static inline void *
-tls_get_addr_adjust (void *from_dtv, tls_index *ti)
+tls_get_addr_adjust (void *from_dtv, GET_ADDR_ARGS)
 {
   /* Perform arithmetic in uintptr_t to avoid pointer wraparound
      issues.  The outer cast to uintptr_t suppresses a warning about
      pointer/integer size mismatch on ILP32 targets with 64-bit
      ti_offset.  */
-  return (void *) (uintptr_t) ((uintptr_t) from_dtv + ti->ti_offset
+  return (void *) (uintptr_t) ((uintptr_t) from_dtv + GET_ADDR_OFFSET
 			       + TLS_DTV_OFFSET);
 }
 
 static void *
 __attribute_noinline__
-tls_get_addr_tail (tls_index *ti, dtv_t *dtv, struct link_map *the_map)
+tls_get_addr_tail (GET_ADDR_ARGS, dtv_t *dtv, struct link_map *the_map)
 {
   /* The allocation was deferred.  Do it now.  */
   if (the_map == NULL)
     {
       /* Find the link map for this module.  */
-      size_t idx = ti->ti_module;
+      size_t idx = GET_ADDR_MODULE;
       struct dtv_slotinfo_list *listp = GL(dl_tls_dtv_slotinfo_list);
 
       while (idx >= listp->len)
@@ -993,35 +1010,35 @@ tls_get_addr_tail (tls_index *ti, dtv_t *dtv, struct link_map *the_map)
 #endif
 	  __rtld_lock_unlock_recursive (GL(dl_load_tls_lock));
 
-	  dtv[ti->ti_module].pointer.to_free = NULL;
-	  dtv[ti->ti_module].pointer.val = p;
+	  dtv[GET_ADDR_MODULE].pointer.to_free = NULL;
+	  dtv[GET_ADDR_MODULE].pointer.val = p;
 
-	  return tls_get_addr_adjust (p, ti);
+	  return tls_get_addr_adjust (p, GET_ADDR_PARAM);
 	}
       else
 	__rtld_lock_unlock_recursive (GL(dl_load_tls_lock));
     }
   struct dtv_pointer result = allocate_and_init (the_map);
-  dtv[ti->ti_module].pointer = result;
+  dtv[GET_ADDR_MODULE].pointer = result;
   assert (result.to_free != NULL);
 
-  return tls_get_addr_adjust (result.val, ti);
+  return tls_get_addr_adjust (result.val, GET_ADDR_PARAM);
 }
 
 
 static struct link_map *
 __attribute_noinline__
-update_get_addr (tls_index *ti, size_t gen)
+update_get_addr (GET_ADDR_ARGS, size_t gen)
 {
-  struct link_map *the_map = _dl_update_slotinfo (ti->ti_module, gen);
+  struct link_map *the_map = _dl_update_slotinfo (GET_ADDR_MODULE, gen);
   dtv_t *dtv = THREAD_DTV ();
 
-  void *p = dtv[ti->ti_module].pointer.val;
+  void *p = dtv[GET_ADDR_MODULE].pointer.val;
 
   if (__glibc_unlikely (p == TLS_DTV_UNALLOCATED))
-    return tls_get_addr_tail (ti, dtv, the_map);
+    return tls_get_addr_tail (GET_ADDR_PARAM, dtv, the_map);
 
-  return tls_get_addr_adjust (p, ti);
+  return tls_get_addr_adjust (p, GET_ADDR_PARAM);
 }
 
 /* For all machines that have a non-macro version of __tls_get_addr, we
@@ -1030,7 +1047,7 @@ update_get_addr (tls_index *ti, size_t gen)
    in ld.so for __tls_get_addr.  */
 
 #ifndef __tls_get_addr
-extern void * __tls_get_addr (tls_index *ti);
+extern void * __tls_get_addr (GET_ADDR_ARGS);
 rtld_hidden_proto (__tls_get_addr)
 rtld_hidden_def (__tls_get_addr)
 #endif
@@ -1038,7 +1055,7 @@ rtld_hidden_def (__tls_get_addr)
 /* The generic dynamic and local dynamic model cannot be used in
    statically linked applications.  */
 void *
-__tls_get_addr (tls_index *ti)
+__tls_get_addr (GET_ADDR_ARGS)
 {
   dtv_t *dtv = THREAD_DTV ();
 
@@ -1050,7 +1067,7 @@ __tls_get_addr (tls_index *ti)
   if (__glibc_unlikely (dtv[0].counter != gen))
     {
       if (_dl_tls_allocate_active ()
-	  && ti->ti_module < _dl_tls_initial_modid_limit)
+	  && GET_ADDR_MODULE < _dl_tls_initial_modid_limit)
 	  /* This is a reentrant __tls_get_addr call, but we can
 	     satisfy it because it's an initially-loaded module ID.
 	     These TLS slotinfo slots do not change, so the
@@ -1063,16 +1080,16 @@ __tls_get_addr (tls_index *ti)
 	  /* Update DTV up to the global generation, see CONCURRENCY NOTES
 	     in _dl_update_slotinfo.  */
 	  gen = atomic_load_acquire (&GL(dl_tls_generation));
-	  return update_get_addr (ti, gen);
+	  return update_get_addr (GET_ADDR_PARAM, gen);
 	}
     }
 
-  void *p = dtv[ti->ti_module].pointer.val;
+  void *p = dtv[GET_ADDR_MODULE].pointer.val;
 
   if (__glibc_unlikely (p == TLS_DTV_UNALLOCATED))
-    return tls_get_addr_tail (ti, dtv, NULL);
+    return tls_get_addr_tail (GET_ADDR_PARAM, dtv, NULL);
 
-  return tls_get_addr_adjust (p, ti);
+  return tls_get_addr_adjust (p, GET_ADDR_PARAM);
 }
 #endif /* SHARED */
 
-- 
2.25.1

