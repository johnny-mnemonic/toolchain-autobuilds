From ada4f13d8337a1d671b1cfaca078fbe37fdecddd Mon Sep 17 00:00:00 2001
From: Xinhui Yang <cyan@cyano.uk>
Date: Thu, 25 Sep 2025 22:27:40 +0800
Subject: [PATCH 33/34] ia64: Increase TCB alignment to 64

As of glibc 2.42, the size of `struct pthread' is 1824 bytes, which can
fit right into the 32-byte boundary, defined by the default
TCB_ALIGNMENT.

However the stack guard and the point guard must be inserted right after
the structure, into the padding space. When the alignment is 32, there
will be no extra space for the stack guard and the pointer guard, thus
these two will be inserted into existing fields.

This effectively corrupts the struct pthread, causing free() to access
inaccessible memory during the release of the thread.
---
 sysdeps/ia64/nptl/pthreaddef.h | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/sysdeps/ia64/nptl/pthreaddef.h b/sysdeps/ia64/nptl/pthreaddef.h
index d5be949955..d212318adf 100644
--- a/sysdeps/ia64/nptl/pthreaddef.h
+++ b/sysdeps/ia64/nptl/pthreaddef.h
@@ -30,6 +30,18 @@
 /* Minimal stack size after allocating thread descriptor and guard size.  */
 #define MINIMAL_REST_STACK	16384
 
+/*
+ * Make sure there are paddings after struct pthread.
+ *
+ * As of glibc 2.42, the size of `struct pthread' is 1824 bytes, which can
+ * fit right into 32-byte boundary.
+ * However the stack guard and the point guard must be inserted right after
+ * the structure, into the padding space. When the alignment is 32, there
+ * will be no extra space for the stack guard and the pointer guard, thus
+ * these two will be inserted into existing fields.
+ * This effectively corrupts the struct pthread.
+ */
+#define TCB_ALIGNMENT		64
 
 /* Location of current stack frame.  */
 #define CURRENT_STACK_FRAME	__stack_pointer
-- 
2.25.1

